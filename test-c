#include <stdio.h>
#include <stdio.h>
#include <errno.h>
#include <sys/param.h>
#include <fcntl.h>

#include <limits.h>

#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <time.h>
#include <sys/time.h>

#include <stdbool.h>

#define MAXTERMLEN	32
#define MAXLOGINLEN	256


struct create {
	int lflag;
	bool aflag;
	int flowflag;
	int hheight;			/* size of scrollback buffer */
	int nargs;
	char line[MAXPATHLEN];
	char dir[MAXPATHLEN];
	char screenterm[MAXTERMLEN + 1];/* is screen really "screen" ? */
};

struct attach{
	char auser[MAXLOGINLEN + 1];	/* username */
	pid_t apid;			/* pid of frontend */
	int adaptflag;			/* adapt window size? */
	int lines, columns;		/* display size */
	char preselect[20];
	int esc;			/* his new escape character unless -1 */
	int meta_esc;			/* his new meta esc character unless -1 */
	char envterm[MAXTERMLEN + 1];	/* terminal type */
	int encoding;			/* encoding of display */
	int detachfirst;		/* whether to detach remote sessions first */
};


struct detach {
	char duser[MAXLOGINLEN + 1];	/* username */
	pid_t dpid;			/* pid of frontend */
};

struct command {
	char auser[MAXLOGINLEN + 1];	/* username */
	int nargs;
	char cmd[MAXPATHLEN + 1];	/* command */
	pid_t apid;		/* pid of frontend */
	char preselect[20];
	char writeback[MAXPATHLEN];	/* The socket to write the result.
						 Only used for MSG_QUERY */
};



struct Message {
	int protocol_revision;	/* reduce harm done by incompatible messages */
	int type;
	char m_tty[MAXPATHLEN];	/* ttyname */
	union {
		struct {
			int lflag;
			bool aflag;
			int flowflag;
			int hheight;			/* size of scrollback buffer */
			int nargs;
			char line[MAXPATHLEN];
			char dir[MAXPATHLEN];
			char screenterm[MAXTERMLEN + 1];/* is screen really "screen" ? */
		} create;
		struct {
			char auser[MAXLOGINLEN + 1];	/* username */
			pid_t apid;			/* pid of frontend */
			int adaptflag;			/* adapt window size? */
			int lines, columns;		/* display size */
			char preselect[20];
			int esc;			/* his new escape character unless -1 */
			int meta_esc;			/* his new meta esc character unless -1 */
			char envterm[MAXTERMLEN + 1];	/* terminal type */
			int encoding;			/* encoding of display */
			int detachfirst;		/* whether to detach remote sessions first */
		} attach;
		struct {
			char duser[MAXLOGINLEN + 1];	/* username */
			pid_t dpid;			/* pid of frontend */
		} detach;
		struct {
			char auser[MAXLOGINLEN + 1];	/* username */
			int nargs;
			char cmd[MAXPATHLEN + 1];	/* command */
			pid_t apid;		/* pid of frontend */
			char preselect[20];
			char writeback[MAXPATHLEN];	/* The socket to write the result.
							   Only used for MSG_QUERY */
			} command;
		char message[MAXPATHLEN * 2];
	} m;
};

#define MSG_VERSION	4
#define MSG_REVISION	(('m'<<24) | ('s'<<16) | ('g'<<8) | MSG_VERSION)


int main(void) {
	printf("MSG_REVISION %d\n", MSG_REVISION);
	printf("pid_t %ld\n", sizeof(pid_t));
	printf("MAXPATHLEN %d\n", MAXPATHLEN);
	printf("MAXLOGINLEN %d\n", MAXLOGINLEN);
	printf("MAXTERMLEN %d\n", MAXTERMLEN);

  printf("message %ld\n", sizeof(struct Message));
	printf("create %ld\n", sizeof(struct create));
	printf("attach %ld\n", sizeof(struct attach));
	printf("detach %ld\n", sizeof(struct detach));
	printf("command %ld\n", sizeof(struct command));
	printf("message %ld\n", sizeof(char[MAXPATHLEN * 2]));
  return 0;
}
